library(pheatmap)
library(gplots) #heatmap.2()
library(ComplexHeatmap)
library(tidyverse)
library(vegan)
library(cowplot)
library(ggrepel)
library(devtools)
library(vsn)
library(dplyr)
library(plyr)
library(ggplot2)
library(knitr)
library(gridExtra)
library(data.table)
# first time installation:
# if (!requireNamespace("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
# BiocManager::install("DESeq2")
# BiocManager::install("DEGreport")
# BiocManager::install("arrayQualityMetrics")
library(BiocManager)
library(DESeq2)
library(DEGreport)
library(arrayQualityMetrics)
library(locfit)
setwd("~/Documents/Rprojects/postdoc\ Rprojects/ODU_postdoc_Rprojects/Paper_Ojo_gene-expression/Porites_porites/host/")
host <- read.csv("merged_hybridref_counts_Ppor_Host.csv", header=TRUE, row.names=1)
dim(host)
## Some genes were not detected in any samples (genes with zero reads across all samples)
host <- host[rowSums(host) > 0, ]
dim(host)
meta <- read.csv("~/Documents/Rprojects/postdoc\ Rprojects/ODU_postdoc_Rprojects/Paper_Ojo_gene-expression/Porites_porites/Porites_porites_Year-2_metadata.csv", header=TRUE, row.names=1)
# Remove all samples that were transplanted to the Destination Ojo.Norte
# There is no control site for Norte Ojo
# For now, we are focused on samples transplanted to Laja Control or Laja Ojo sites
# This is consistent with analyses for the other 2 species in the experiment
# Also, group sample size is too small for Ojo.Norte destination
meta <- subset(meta, Destination_name != "Ojo.Norte")
meta$Destination_type <- revalue(meta$Destination_type, c("control" = "Control", "ojo" = "Ojo"))
meta <- meta %>% unite(group, Origin_type, Destination_type, sep = ".", remove = FALSE)
meta[sapply(meta, is.character)] <- lapply(meta[sapply(meta, is.character)],
as.factor)
# Colony_ID is equivalent to genotype
meta$Colony_ID <- as.factor(meta$Colony_ID)
levels(meta$group)
meta <- dplyr::select(meta, Colony_ID, group, Origin_name, Origin_type, Destination_name, Destination_type, pH_Destination)
## The do.call() function produces a data frame with one col per sample,
## transpose it to obtain one row per sample and one column per statistics.
stats.per.sample <- data.frame(t(do.call(cbind, lapply(host, summary))))
stats.per.sample$libsum <- apply(host, 2, sum) ## libsum
stats.per.sample$zeros <- apply(host==0, 2, sum)
stats.per.sample$percent.zeros <- 100*stats.per.sample$zeros/nrow(host)
head(stats.per.sample)
par(mfrow=c(3,1))
hist(as.matrix(host), col="blue", border="white", breaks=50)
hist(as.matrix(host), col="blue", border="white",
breaks=20000, xlim=c(0,500), main="Counts per gene",
xlab="Counts (truncated axis)", ylab="Number of genes",
las=1, cex.axis=0.7)
epsilon <- 1 # pseudo-count to avoid problems with log(0)
hist(as.matrix(log2(host + epsilon)), breaks=100, col="blue", border="white",
main="Log2-transformed counts per gene", xlab="log2(counts+1)", ylab="Number of genes",
las=1, cex.axis=0.7)
boxplot(log2(host + epsilon), col=meta$group, pch=".",
horizontal=TRUE, cex.axis=0.5, las=1,
xlab="log2(Counts +1)")
if(!require("affy")){
source("http://bioconductor.org/biocLite.R")
biocLite("affy")
}
library(affy)
## Each curve corresponds to one sample
plotDensity(log2(host + epsilon), lty=1, col= meta$group, lwd=2)
grid()
# how many genes have mean count >=3
host_means_filtered <- cbind(host, means = apply(host, 1, mean))
table(host_means_filtered$means>=3)
host_means_filtered <- subset(host_means_filtered, host_means_filtered$means>=3)
host_means_filtered <- host_means_filtered[, 1:10]
dim(host_means_filtered)
boxplot(log2(host_means_filtered + epsilon), col=meta$group, pch=".",
horizontal=TRUE, cex.axis=0.5, las=1,
xlab="log2(Counts +1)")
prop.null <- apply(host_means_filtered, 2, function(x) 100*mean(x==0))
barplot(prop.null, main="Percentage of null counts per sample",
horiz=TRUE, cex.names=0.5, las=1,
col=meta$group, ylab='Samples', xlab='% of null counts')
prop.null[order(prop.null)]
drop <- c("R_051_C_Pp_yr2")
host_means_filtered <- host_means_filtered[,!(names(host_means_filtered) %in% drop)]
meta <- meta[!(row.names(meta) %in% drop),]
prop.null <- apply(host_means_filtered, 2, function(x) 100*mean(x==0))
prop.null[order(prop.null)]
prop.null <- apply(host_means_filtered, 2, function(x) 100*mean(x==0))
barplot(prop.null, main="Percentage of null counts per sample",
horiz=TRUE, cex.names=0.5, las=1,
col=meta$group, ylab='Samples', xlab='% of null counts')
meta %>%
group_by(group) %>%
dplyr::summarise(count = n())
# To get an idea about how RNA-seq counts are distributed, plot counts for a couple samples
p1 <- ggplot(host_means_filtered) +
geom_histogram(aes(x = R_045_C_Pp_yr2), stat = "bin", bins = 200) +
xlim(-5, 500)  +
xlab("Raw expression counts") +
ylab("Number of genes")
p2 <- ggplot(host_means_filtered) +
geom_histogram(aes(x = R_058_La_Pp_yr2), stat = "bin", bins = 200) +
xlim(-5, 500)  +
xlab("Raw expression counts") +
ylab("Number of genes")
grid.arrange(p1, p2, ncol = 2)
mean_counts <- apply(host_means_filtered, 1, mean)
variance_counts <- apply(host_means_filtered, 1, var)
df <- data.frame(mean_counts, variance_counts)
ggplot(df) +
geom_point(aes(x=mean_counts, y=variance_counts)) +
geom_line(aes(x=mean_counts, y=mean_counts, color="red")) +
scale_y_log10() +
scale_x_log10() +
theme(legend.position = "none")
# Check that sample names match in both files
all(colnames(host_means_filtered) %in% rownames(meta))
all(colnames(host_means_filtered) == rownames(meta))
# If your data did not match, you could use the match() function to rearrange them to be matching.
levels(meta$group)
# can only do 2 group comparisons (limitation of DESeq2)
dds <- DESeqDataSetFromMatrix(countData = host_means_filtered,
colData = meta,
design= ~group)
vsdBlindTrue <- DESeq2::varianceStabilizingTransformation(dds, blind = TRUE, fitType = "parametric")
boxplot(assay(vsdBlindTrue), col=meta$group)
vsdBlindFalse <- DESeq2::varianceStabilizingTransformation(dds, blind = FALSE, fitType = "parametric")
boxplot(assay(vsdBlindFalse), col=meta$group)
rlogged.BlindTrue = rlogTransformation(dds, blind = TRUE)
boxplot(assay(rlogged.BlindTrue), col=meta$group)
rlogged.BlindFalse = rlogTransformation(dds, blind = FALSE)
boxplot(assay(rlogged.BlindFalse), col=meta$group)
# this gives log2(n + 1)
ntd <- normTransform(dds)
meanSdPlot(assay(ntd))
meanSdPlot(assay(vsdBlindTrue))
meanSdPlot(assay(vsdBlindFalse))
meanSdPlot(assay(rlogged.BlindTrue))
meanSdPlot(assay(rlogged.BlindFalse))
dists.rlog.BlindFalse <- dist(t(assay(rlogged.BlindFalse)))
plot(hclust(dists.rlog.BlindFalse))
dists.vsdBlindFalse <- dist(t(assay(vsdBlindFalse)))
plot(hclust(dists.vsdBlindFalse))
# save varianceStabilizingTransformation counts
saveRDS(vsdBlindFalse, file = "counts_vst.BlindFalse_Ppor_Host.rds")
# later, after you already created the file, can load the existing file:
#vsdBlindFalse <- readRDS("counts_vst.BlindFalse_Ppor_Host.rds")
dds <- estimateSizeFactors(dds)
plot(sort(sizeFactors(dds)))
#sort.list(sizeFactors(dds))
sizeFactors(dds)
order(sizeFactors(dds), decreasing = TRUE)
# to retrieve the normalized counts matrix from dds
normalized_counts <- counts(dds, normalized=TRUE)
rownames(normalized_counts) <- rownames(host_means_filtered)
# Save normalized counts table as R data file for later use
saveRDS(normalized_counts, file = "counts_normalized_Ppor_Host.rds")
normalized_counts <- as.data.frame.array(normalized_counts)
setDT(normalized_counts, keep.rownames = "gene")
# Save normalized data matrix for later use:
write.csv(normalized_counts, "counts_normalized_Ppor_Host.csv", row.names = F)
colSums(counts(dds))[order(colSums(counts(dds)))]
colSums(counts(dds)) %>% barplot(col=meta$group)
# How do the numbers correlate with the size factor?
# Now take a look at the total depth after normalization using:
#colSums(counts(dds, normalized=T))
colSums(counts(dds, normalized=T))[order(colSums(counts(dds, normalized=T)))]
colSums(counts(dds, normalized = T)) %>% barplot(col=meta$group)
pcadata = DESeq2::plotPCA(vsdBlindFalse, intgroup = c( "group"), returnData = TRUE)
percentVar = round(100 * attr(pcadata, "percentVar"))
pca = prcomp(t(assay(vsdBlindFalse)), center = TRUE, scale. = FALSE)
DESeq2::plotPCA(vsdBlindFalse, returnData = TRUE, intgroup = c("group")) %>%
ggplot(aes(x = PC1, y = PC2)) +
geom_point(aes(colour = group), size = 2) +
stat_ellipse(geom = "polygon", alpha = 1/10, aes(fill = group)) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
theme_cowplot()
pcadata = DESeq2::plotPCA(vsdBlindFalse, intgroup = c("Origin_name"), returnData = TRUE)
percentVar = round(100 * attr(pcadata, "percentVar"))
pca = prcomp(t(assay(vsdBlindFalse)), center = TRUE, scale. = FALSE)
DESeq2::plotPCA(vsdBlindFalse, returnData = TRUE, intgroup = c("Origin_name") ) %>%
ggplot(aes(x = PC1, y = PC2)) +
geom_point(aes(colour = Origin_name), size = 2) +
stat_ellipse(geom = "polygon", alpha = 1/10, aes(fill = Origin_name)) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
theme_cowplot()
pcadata = DESeq2::plotPCA(vsdBlindFalse, intgroup = c("Destination_name"), returnData = TRUE)
percentVar = round(100 * attr(pcadata, "percentVar"))
pca = prcomp(t(assay(vsdBlindFalse)), center = TRUE, scale. = FALSE)
DESeq2::plotPCA(vsdBlindFalse, returnData = TRUE, intgroup = c("Destination_name") ) %>%
ggplot(aes(x = PC1, y = PC2)) +
geom_point(aes(colour = Destination_name), size = 2) +
stat_ellipse(geom = "polygon", alpha = 1/10, aes(fill = Destination_name)) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
theme_cowplot()
pcadata = DESeq2::plotPCA(vsdBlindFalse, intgroup = c("Colony_ID"), returnData = TRUE)
percentVar = round(100 * attr(pcadata, "percentVar"))
pca = prcomp(t(assay(vsdBlindFalse)), center = TRUE, scale. = FALSE)
DESeq2::plotPCA(vsdBlindFalse, returnData = TRUE, intgroup = c("Colony_ID")) %>%
ggplot(aes(x = PC1, y = PC2)) +
geom_point(aes(colour = Colony_ID), size = 2) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
theme_cowplot()
rld_mat <- assay(vsdBlindFalse)
rld_cor <- cor(rld_mat)
#head(rld_cor)   ## check the output of cor(), make note of the rownames and colnames
pheatmap(rld_cor)
# sample by distance heatmap
sampleDists <- as.matrix(dist(t(assay(vsdBlindFalse))))
heatmap.2(as.matrix(sampleDists), key=F, trace="none",
col=colorpanel(100, "black", "white"),
margin=c(10, 10))
# Generate normalized counts
# perform the median of ratios method of normalization
# perform a Wald test in DESeq2 pairwise comparison between treatment effects
dds <- DESeq2::DESeq(dds, fitType = "parametric", test = "Wald")
# copy here text from below:
# -- replacing outliers and refitting for 31 genes
# -- DESeq argument 'minReplicatesForReplace' = 7
# -- original counts are preserved in counts(dds)
results.dds = results(dds)
head(results.dds)
dispersionFunction(dds)
# already accomplished as part of DESeq() function (above):
#dds <- DESeq2::estimateSizeFactors(dds)
#dds <- DESeq2::estimateDispersionsGeneEst(dds)
#dds <- DESeq2::estimateDispersionsFit(dds)
#dds <- DESeq2::estimateDispersionsMAP(dds)
DESeq2::plotDispEsts(dds)
head(dispersions(dds))  # parametric
rownames(mcols(mcols(dds)))
dispersions(dds) %>% hist(breaks = 500)
# It can be useful to include the sample names in the data set object:
rownames(dds) <- rownames(host_means_filtered)
levels(dds$group)
results_RO_RC_.1 <- results(dds, contrast = c("group", "Reef.Ojo", "Reef.Control"), alpha = 0.1)
head(results_RO_RC_.1)
summary(results_RO_RC_.1)
### convert to dataframe (from DESeq2 object)
res_RO_RC_.1_df <- data.frame(results_RO_RC_.1)
DE_RO_RC_padj.1 <- res_RO_RC_.1_df %>%
rownames_to_column('gene') %>%
as_tibble() %>%
filter(padj < 0.1) %>%
arrange(padj)
head(DE_RO_RC_padj.1)
# save rlogged file
saveRDS(DE_RO_RC_padj.1, file = "Ppor_Host_DE_genes_RO_RC_padj.1.rds")
write.csv(DE_RO_RC_padj.1, "Ppor_Host_DE_genes_RO_RC_padj.1.csv")
up.results_RO_RC_padj.1 = row.names(results_RO_RC_.1[results_RO_RC_.1$padj<0.1 & !(is.na(results_RO_RC_.1$padj)) & results_RO_RC_.1$log2FoldChange>0,])
up.results_RO_RC_padj.1 <- as.data.frame(up.results_RO_RC_padj.1)
up.results_RO_RC_padj.1$DEG <- 'Up'
down.results_RO_RC_padj.1 = row.names(results_RO_RC_.1[results_RO_RC_.1$padj<0.1 & !(is.na(results_RO_RC_.1$padj)) & results_RO_RC_.1$log2FoldChange<0,])
down.results_RO_RC_padj.1 <- as.data.frame(down.results_RO_RC_padj.1)
down.results_RO_RC_padj.1$DEG <- 'Down'
RO_RC_padj.1_summary <- merge(up.results_RO_RC_padj.1, down.results_RO_RC_padj.1, all=T)
dim(RO_RC_padj.1_summary)
# save file
write.csv(RO_RC_padj.1_summary, file="Ppor_Host_DE_genes_RO_RC_padj.1_summary.csv")
DE_RO_RC_pvalue <- res_RO_RC_.1_df %>%
rownames_to_column('gene') %>%
as_tibble() %>%
filter(pvalue < 0.05) %>%
arrange(pvalue)
head(DE_RO_RC_pvalue)
# save rlogged file
saveRDS(DE_RO_RC_pvalue, file = "Ppor_Host_RO_RC_pval.05.rds")
write.csv(DE_RO_RC_pvalue, "Ppor_Host_RO_RC_pval.05.csv")
dim(DE_RO_RC_pvalue)
rm(list=ls())
library(tidyverse)
setwd("~/Documents/Rprojects/postdoc\ Rprojects/ODU_postdoc_Rprojects/Paper_Ojo_gene-expression/Porites_astreoides/orthofinder/")
past_seq2iso <- read.table("~/Documents/Postdoc/ODU_postdoc/projects/Ojo_gene-expression/database/pastreoides_2014/pastreoides_may2014/past_seq2iso_suffixed.tab", header = FALSE, sep = "\t", stringsAsFactors=T)
past_seq2iso <- past_seq2iso %>%
rename(isotig = V1,
gene = V2)
past_seq2iso <- read.table("~/Documents/Postdoc/ODU_postdoc/projects/Ojo_gene-expression/database/pastreoides_2014/pastreoides_may2014/past_seq2iso_suffixed.tab", header = FALSE, sep = "\t", stringsAsFactors=T)
library(tidyverse)
setwd("~/Documents/Rprojects/postdoc\ Rprojects/ODU_postdoc_Rprojects/Paper_Ojo_gene-expression/Porites_astreoides/orthofinder/")
past_seq2iso <- read.table("~/Documents/Postdoc/ODU_postdoc/projects/Ojo_gene-expression/database/pastreoides_2014/pastreoides_may2014/past_seq2iso_suffixed.tab", header = FALSE, sep = "\t", stringsAsFactors=T)
past_seq2iso <- past_seq2iso %>%
rename(isotig = V1,
gene = V2)
past_seq2iso <- read.table("~/Documents/Postdoc/ODU_postdoc/projects/Ojo_gene-expression/database/pastreoides_2014/pastreoides_may2014/past_seq2iso_suffixed.tab", header = FALSE, sep = "\t", stringsAsFactors=T)
past_seq2iso <- past_seq2iso %>%
dplyr::rename(isotig = V1,
gene = V2)
head(past_seq2iso)
library(tidyverse)
setwd("~/Documents/Rprojects/postdoc\ Rprojects/ODU_postdoc_Rprojects/Paper_Ojo_gene-expression/Porites_astreoides/orthofinder/")
past_seq2iso <- read.table("~/Documents/Postdoc/ODU_postdoc/projects/Ojo_gene-expression/database/pastreoides_2014/pastreoides_may2014/past_seq2iso_suffixed.tab", header = FALSE, sep = "\t", stringsAsFactors=T)
past_seq2iso <- past_seq2iso %>%
dplyr::rename(isotig = V1,
gene = V2)
head(past_seq2iso)
orthogroups <- read.table("~/Documents/Rprojects/postdoc\ Rprojects/ODU_postdoc_Rprojects/Paper_Ojo_gene-expression/Porites_astreoides/orthofinder/Sid.v.Past_longestContig/Phylogenetic_Hierarchical_Orthogroups/N0.tsv", header = TRUE, sep = "\t", stringsAsFactors=F) #row.names = 1
orthogroups <- orthogroups %>%
rename(orthogroup = HOG,
gene_Sid = X19222_Sid_GoodCoral_500lnThresh_Final,
isotig = X29422_past_LongestContig_suffixed)
library(tidyverse)
setwd("~/Documents/Rprojects/postdoc\ Rprojects/ODU_postdoc_Rprojects/Paper_Ojo_gene-expression/Porites_astreoides/orthofinder/")
past_seq2iso <- read.table("~/Documents/Postdoc/ODU_postdoc/projects/Ojo_gene-expression/database/pastreoides_2014/pastreoides_may2014/past_seq2iso_suffixed.tab", header = FALSE, sep = "\t", stringsAsFactors=T)
past_seq2iso <- past_seq2iso %>%
dplyr::rename(isotig = V1,
gene = V2)
head(past_seq2iso)
orthogroups <- read.table("~/Documents/Rprojects/postdoc\ Rprojects/ODU_postdoc_Rprojects/Paper_Ojo_gene-expression/Porites_astreoides/orthofinder/Sid.v.Past_longestContig/Phylogenetic_Hierarchical_Orthogroups/N0.tsv", header = TRUE, sep = "\t", stringsAsFactors=F) #row.names = 1
orthogroups <- orthogroups %>%
dplyr::rename(orthogroup = HOG,
gene_Sid = X19222_Sid_GoodCoral_500lnThresh_Final,
isotig = X29422_past_LongestContig_suffixed)
dim(orthogroups)
head(orthogroups)
orthogroups <- orthogroups[, c(1,4:5)]
rownames(orthogroups) <- orthogroups$orthogroup
head(orthogroups)
# Split the comma-separated paralogs
ortho.split <- strsplit(as.matrix(orthogroups),", ")
# it's now a list of character vectors
# Add dimensions:
dim(ortho.split) <- dim(orthogroups)
# Add row and column names:
dimnames(ortho.split) <- dimnames(orthogroups)
ortho.split["N0.HOG0000000", ]
ortho.split["N0.HOG0000021", ]
names_orthogroups <- row.names(apply(ortho.split,2,sapply,length))
orthoSize <- apply(ortho.split,2,sapply,length)
orthoSize <- orthoSize[, 2:3]
orthoSize["N0.HOG0000021", ]
plot(table(apply(orthoSize>0,1,sum)),ylab="no. orthogroups",xlab="no. transcriptomes")
sum(apply(orthoSize==1,1,all)) # number of 1:1 groups
#sum(apply(grpSize==1,1,sum)==2 & apply(grpSize > 1,1,sum)==0)
names_1.to.1 <- as.data.frame(apply(orthoSize==1,1,all))
names_1.to.1 <- names_1.to.1 %>%
filter(names_1.to.1$`apply(orthoSize == 1, 1, all)` == TRUE)
names_1.to.1$orthogroups <- rownames(names_1.to.1)
names_1.to.1 <- names_1.to.1[ ,2]
ortho_1.to.1  <- orthogroups[names_1.to.1, ]
ortho_1.to.1[sapply(ortho_1.to.1, is.character)] <- lapply(ortho_1.to.1[sapply(ortho_1.to.1, is.character)], as.factor)
dim(ortho_1.to.1)
head(ortho_1.to.1)
ortho.1.to.1_Past.isotigs <- past_seq2iso %>%
inner_join(ortho_1.to.1, by = "isotig")
head(ortho.1.to.1_Past.isotigs)
ortho.df <- as.data.frame(ortho.split)
ortho.df <- subset(ortho.df, ortho.df$gene_Sid != "character(0)")
ortho.df <- subset(ortho.df, ortho.df$isotig != "character(0)")
dim(ortho.df)
all(rownames(names_1.to.1) %in% rownames(ortho.df))
all(rownames(names_1.to.1) %in% ortho.df$orthogroup)
# any()
length(match(names_1.to.1, rownames(ortho.df)))
#length(names_1.to.1 %in% rownames(ortho.df))
#length(names_1.to.1 %in% ortho.df$orthogroup)
class(names_1.to.1)
#typeof(names_1.to.1)
head(rownames(ortho.df) %in% names_1.to.1)
names_multi.ortho <- setdiff(rownames(ortho.df), names_1.to.1)
str(names_multi.ortho)
multi.ortho  <- orthogroups[names_multi.ortho, ]
head(multi.ortho)
multi.ortho.Sid <- multi.ortho[ , 1:2]
s <- strsplit(as.character(multi.ortho.Sid$gene_Sid),", ")
head(s, 2)
multi.ortho.Sid <- multi.ortho[ , 1:2]
multi.ortho.Sid <- separate_rows(multi.ortho.Sid, gene_Sid, sep = ", ")
multi.ortho.Sid[sapply(multi.ortho.Sid, is.character)] <- lapply(multi.ortho.Sid[sapply(multi.ortho.Sid, is.character)],
as.factor)
multi.ortho.Sid <- multi.ortho.Sid %>%
dplyr::rename(gene = gene_Sid)
dim(multi.ortho.Sid)
head(multi.ortho.Sid)
multi.ortho.Past <- multi.ortho[ , c(1,3)]
multi.ortho.Past <- separate_rows(multi.ortho.Past, isotig, sep = ", ")
multi.ortho.Past[sapply(multi.ortho.Past, is.character)] <- lapply(multi.ortho.Past[sapply(multi.ortho.Past, is.character)],
as.factor)
dim(multi.ortho.Past)
head(multi.ortho.Past)
multi.ortho.Past.isotigs <- past_seq2iso %>%
inner_join(multi.ortho.Past, by = "isotig")
head(multi.ortho.Past.isotigs)
OO_OC_Past <- read.csv("~/Documents/Rprojects/postdoc\ Rprojects/ODU_postdoc_Rprojects/Paper_Ojo_gene-expression/Porites_astreoides/host/Past_Host_DE_genes_OO_OC_padj.1.csv", header = TRUE)
OO_OC_Past$gene <- as.factor(OO_OC_Past$gene)
head(OO_OC_Past)
OO_OC_Sid <- read.csv("~/Documents/Rprojects/postdoc\ Rprojects/ODU_postdoc_Rprojects/Paper_Ojo_gene-expression/Siderastrea/host/Sid_Host_DE_genes_OO_OC_padj.1.csv", header = TRUE)
OO_OC_Sid$gene <- as.factor(OO_OC_Sid$gene)
head(OO_OC_Sid)
any(OO_OC_Sid$gene %in% multi.ortho.Sid$gene)
length(intersect(OO_OC_Sid$gene, multi.ortho.Sid$gene))
length(intersect(OO_OC_Sid$gene, ortho_1.to.1$gene))
length(intersect(OO_OC_Past$gene, multi.ortho.Past.isotigs$gene))
length(intersect(OO_OC_Past$gene, ortho.1.to.1_Past.isotigs$gene))
past_multi.isogroups_OO_OC <- multi.ortho.Past.isotigs %>%
inner_join(OO_OC_Past, by = "gene")
dim(past_multi.isogroups_OO_OC)
head(past_multi.isogroups_OO_OC)
past_multi.isogroups_OO_OC %>% count(orthogroup) %>% filter(n > 1)
head(past_1.to.1.isogroups_OC_LC)
past_1.to.1.isogroups_OC_LC <- ortho.1.to.1_Past.isotigs %>%
inner_join(OC_LC_Past, by = "gene")
library(tidyverse)
setwd("~/Documents/Rprojects/postdoc\ Rprojects/ODU_postdoc_Rprojects/Paper_Ojo_gene-expression/Porites_astreoides/orthofinder/")
past_seq2iso <- read.table("~/Documents/Postdoc/ODU_postdoc/projects/Ojo_gene-expression/database/pastreoides_2014/pastreoides_may2014/past_seq2iso_suffixed.tab", header = FALSE, sep = "\t", stringsAsFactors=T)
past_seq2iso <- past_seq2iso %>%
dplyr::rename(isotig = V1,
gene = V2)
head(past_seq2iso)
orthogroups <- read.table("~/Documents/Rprojects/postdoc\ Rprojects/ODU_postdoc_Rprojects/Paper_Ojo_gene-expression/Porites_astreoides/orthofinder/Sid.v.Past_longestContig/Phylogenetic_Hierarchical_Orthogroups/N0.tsv", header = TRUE, sep = "\t", stringsAsFactors=F) #row.names = 1
orthogroups <- orthogroups %>%
dplyr::rename(orthogroup = HOG,
gene_Sid = X19222_Sid_GoodCoral_500lnThresh_Final,
isotig = X29422_past_LongestContig_suffixed)
dim(orthogroups)
head(orthogroups)
orthogroups <- orthogroups[, c(1,4:5)]
rownames(orthogroups) <- orthogroups$orthogroup
head(orthogroups)
# Split the comma-separated paralogs
ortho.split <- strsplit(as.matrix(orthogroups),", ")
# it's now a list of character vectors
# Add dimensions:
dim(ortho.split) <- dim(orthogroups)
# Add row and column names:
dimnames(ortho.split) <- dimnames(orthogroups)
ortho.split["N0.HOG0000000", ]
ortho.split["N0.HOG0000021", ]
names_orthogroups <- row.names(apply(ortho.split,2,sapply,length))
orthoSize <- apply(ortho.split,2,sapply,length)
orthoSize <- orthoSize[, 2:3]
orthoSize["N0.HOG0000021", ]
plot(table(apply(orthoSize>0,1,sum)),ylab="no. orthogroups",xlab="no. transcriptomes")
sum(apply(orthoSize==1,1,all)) # number of 1:1 groups
#sum(apply(grpSize==1,1,sum)==2 & apply(grpSize > 1,1,sum)==0)
names_1.to.1 <- as.data.frame(apply(orthoSize==1,1,all))
names_1.to.1 <- names_1.to.1 %>%
filter(names_1.to.1$`apply(orthoSize == 1, 1, all)` == TRUE)
names_1.to.1$orthogroups <- rownames(names_1.to.1)
names_1.to.1 <- names_1.to.1[ ,2]
ortho_1.to.1  <- orthogroups[names_1.to.1, ]
ortho_1.to.1[sapply(ortho_1.to.1, is.character)] <- lapply(ortho_1.to.1[sapply(ortho_1.to.1, is.character)], as.factor)
dim(ortho_1.to.1)
head(ortho_1.to.1)
ortho.1.to.1_Past.isotigs <- past_seq2iso %>%
inner_join(ortho_1.to.1, by = "isotig")
head(ortho.1.to.1_Past.isotigs)
ortho.df <- as.data.frame(ortho.split)
ortho.df <- subset(ortho.df, ortho.df$gene_Sid != "character(0)")
ortho.df <- subset(ortho.df, ortho.df$isotig != "character(0)")
dim(ortho.df)
all(rownames(names_1.to.1) %in% rownames(ortho.df))
all(rownames(names_1.to.1) %in% ortho.df$orthogroup)
# any()
length(match(names_1.to.1, rownames(ortho.df)))
#length(names_1.to.1 %in% rownames(ortho.df))
#length(names_1.to.1 %in% ortho.df$orthogroup)
class(names_1.to.1)
#typeof(names_1.to.1)
head(rownames(ortho.df) %in% names_1.to.1)
names_multi.ortho <- setdiff(rownames(ortho.df), names_1.to.1)
str(names_multi.ortho)
multi.ortho  <- orthogroups[names_multi.ortho, ]
head(multi.ortho)
multi.ortho.Sid <- multi.ortho[ , 1:2]
s <- strsplit(as.character(multi.ortho.Sid$gene_Sid),", ")
head(s, 2)
multi.ortho.Sid <- multi.ortho[ , 1:2]
multi.ortho.Sid <- separate_rows(multi.ortho.Sid, gene_Sid, sep = ", ")
multi.ortho.Sid[sapply(multi.ortho.Sid, is.character)] <- lapply(multi.ortho.Sid[sapply(multi.ortho.Sid, is.character)],
as.factor)
multi.ortho.Sid <- multi.ortho.Sid %>%
dplyr::rename(gene = gene_Sid)
dim(multi.ortho.Sid)
head(multi.ortho.Sid)
multi.ortho.Past <- multi.ortho[ , c(1,3)]
multi.ortho.Past <- separate_rows(multi.ortho.Past, isotig, sep = ", ")
multi.ortho.Past[sapply(multi.ortho.Past, is.character)] <- lapply(multi.ortho.Past[sapply(multi.ortho.Past, is.character)],
as.factor)
dim(multi.ortho.Past)
head(multi.ortho.Past)
multi.ortho.Past.isotigs <- past_seq2iso %>%
inner_join(multi.ortho.Past, by = "isotig")
head(multi.ortho.Past.isotigs)
OO_OC_Past <- read.csv("~/Documents/Rprojects/postdoc\ Rprojects/ODU_postdoc_Rprojects/Paper_Ojo_gene-expression/Porites_astreoides/host/Past_Host_DE_genes_OO_OC_padj.1.csv", header = TRUE)
OO_OC_Past$gene <- as.factor(OO_OC_Past$gene)
head(OO_OC_Past)
OO_OC_Sid <- read.csv("~/Documents/Rprojects/postdoc\ Rprojects/ODU_postdoc_Rprojects/Paper_Ojo_gene-expression/Siderastrea/host/Sid_Host_DE_genes_OO_OC_padj.1.csv", header = TRUE)
OO_OC_Sid$gene <- as.factor(OO_OC_Sid$gene)
head(OO_OC_Sid)
any(OO_OC_Sid$gene %in% multi.ortho.Sid$gene)
length(intersect(OO_OC_Sid$gene, multi.ortho.Sid$gene))
length(intersect(OO_OC_Sid$gene, ortho_1.to.1$gene))
length(intersect(OO_OC_Past$gene, multi.ortho.Past.isotigs$gene))
length(intersect(OO_OC_Past$gene, ortho.1.to.1_Past.isotigs$gene))
past_multi.isogroups_OO_OC <- multi.ortho.Past.isotigs %>%
inner_join(OO_OC_Past, by = "gene")
dim(past_multi.isogroups_OO_OC)
head(past_multi.isogroups_OO_OC)
past_multi.isogroups_OO_OC %>% count(orthogroup) %>% filter(n > 1)
any(OC_LC_Sid$gene %in% multi.ortho.Sid$gene)
rm(list=ls())
